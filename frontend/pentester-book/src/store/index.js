import { createStore } from "vuex";
import axios from "axios";

const store = createStore({
  state: {
    commands: [], // Хранит список всех команд
    isLoaded: false, // Флаг для отслеживания загрузки списка команд
    commandDetails: {}, // Кэш деталей для конкретных команд
  },
  mutations: {
    setCommands(state, commands) {
      state.commands = commands.map((cmd) => ({
        id: cmd.id,
        name: cmd.name,
      }));
      state.isLoaded = true; // Отмечаем, что список загружен
    },
    setCommandDetails(state, { id, details }) {
      state.commandDetails = {
        ...state.commandDetails,
        [id]: {
          id: details.Id,
          name: details.Name,
          description: details.Descripton || "", // Убедимся, что значение всегда есть
          template: details.Template || "",
          arguments: details.Args || [],
        },
      };
    },
  },
  actions: {
    async fetchCommands({ state, commit }) {
      if (state.isLoaded) return; // Если данные уже загружены, запрос не выполняется

      try {
        const response = await axios.get("/commands/getall");
        const commands = response.data?.data || []; // Получаем список команд
        commit("setCommands", commands);
      } catch (error) {
        console.error("Failed to fetch commands:", error);
      }
    },

    async fetchCommandDetails({ state, commit }, id) {
      if (state.commandDetails[id]) return state.commandDetails[id]; // Если данные есть, возвращаем их

      try {
        const response = await axios.get(`/commands/${id}/`);
        const details = response.data || {}; // Извлекаем детали команды
        commit("setCommandDetails", { id, details });
        return details; // Возвращаем детали команды
      } catch (error) {
        console.error(`Failed to fetch details for command ${id}:`, error);
        return null;
      }
    },
  },
  getters: {
    getCommandById: (state) => (id) =>
      state.commands.find((cmd) => cmd.id === id), // Возвращает команду по ID
    allCommands: (state) => state.commands, // Возвращает список всех команд
    getCommandDetails: (state) => (id) => state.commandDetails[id], // Возвращает детали команды по её ID
  },
});

export default store;
